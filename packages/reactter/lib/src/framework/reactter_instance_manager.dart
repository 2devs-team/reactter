part of '../framework.dart';

/// A mixin-class that adds instances management features
/// to classes that use it.
///
/// It allows registering, unregistering, getting, creating,
/// and deleting instances of a certain type.
///
/// It also provides methods to check if an instance exists
/// and to get the instance of a certain type with a given ID.
///
/// It stores instances and their builders, and
/// emits lifecycle events when instances are registered, unregistered,
/// initialized, and destroyed.
abstract class ReactterInstanceManager {
  /// It's used to store instances of a certain
  /// type with a unique key generated by `ReactterInstance.generateKey<T?>(id)`.
  final HashMap<String, ReactterInstance> _instancesByKey = HashMap();

  /// It's used to keep track of the instances that have been created,
  /// so they can be accessed and managed later.
  final HashMap<Object, ReactterInstance> _instancesCreated = HashMap();

  /// Registers a [builder] function into the store
  /// to then allows to create the instance with [get].
  ///
  /// Returns `true` when instance has been registered.
  bool register<T extends Object?>({
    required InstanceBuilder<T> builder,
    String? id,
  }) {
    final instanceKey = ReactterInstance.generateKey<T?>(id);
    var reactterInstance = _instancesByKey[instanceKey];

    if (reactterInstance?._builder != null) {
      Reactter.log('Instance "$reactterInstance" already registered.');
      return false;
    }

    reactterInstance =
        _instancesByKey[instanceKey] = ReactterInstance<T>(id, builder);

    Reactter.emit(reactterInstance, Lifecycle.registered);
    Reactter.log('Instance "$reactterInstance" has been registered.');
    return true;
  }

  /// Removes a builder function from the store.
  ///
  /// Returns `true` when instance has been unregistered.
  bool unregister<T extends Object>([String? id]) {
    final instanceKey = ReactterInstance.generateKey<T?>(id);
    var reactterInstance = _instancesByKey[instanceKey];

    if (reactterInstance == null) {
      reactterInstance = ReactterInstance<T>(id);
      Reactter.log('Instance "$reactterInstance" don\'t exist.');
      return false;
    }

    _removeInstance<T>(reactterInstance);

    Reactter.emit(reactterInstance, Lifecycle.unregistered);
    Reactter.offAll(reactterInstance);

    _instancesByKey.remove(instanceKey);

    Reactter.log('Instance "$reactterInstance" has been unregistered.');
    return true;
  }

  /// Gets the instance of [T] with or without [id] given.
  ///
  /// If not found and has registered, create a new instance.
  ///
  /// If found it, returns it, else returns `null`.
  T? get<T extends Object?>([String? id]) {
    return _getAndCreateIfNotExtist<T>(id)?.instance;
  }

  /// Registers, creates and gets the instance of [T] with or without [id] given.
  ///
  /// Returns it, else return `null`.
  T? create<T extends Object?>({
    required InstanceBuilder<T> builder,
    String? id,
    Object? ref,
  }) {
    register<T>(builder: builder, id: id);

    final reactterInstance = _getAndCreateIfNotExtist<T>(id);

    if (ref != null) {
      reactterInstance?.refs.add(ref.hashCode);
    }

    return reactterInstance?.instance;
  }

  /// Deletes the instance from the store but keep the [builder] function.
  ///
  /// Returns `true` when the instance has been deleted.
  bool delete<T extends Object?>([String? id, Object? ref]) {
    final instanceKey = ReactterInstance.generateKey<T?>(id);
    var reactterInstance = _instancesByKey[instanceKey];

    if (reactterInstance == null || reactterInstance.instance == null) {
      reactterInstance = ReactterInstance<T>(id);
      Reactter.log(
        'Instance "$reactterInstance" already deleted.',
        isError: true,
      );
      return false;
    }

    if (ref != null) {
      reactterInstance.refs.remove(ref.hashCode);
    }

    if (reactterInstance.refs.isNotEmpty) {
      return false;
    }

    _removeInstance<T>(reactterInstance);

    Reactter.offAll(reactterInstance);

    return true;
  }

  /// Get the [ReactterInstance] of [instance] given.
  ///
  /// If found it, returns it, else returns `null`.
  ReactterInstance? find(Object? instance) => _instancesCreated[instance];

  /// Valids if the instance of [T] with or without [id] given exists.
  bool exists<T extends Object?>([String? id]) {
    final instanceKey = ReactterInstance.generateKey<T?>(id);

    return _instancesByKey[instanceKey]?.instance != null;
  }

  /// Returns an instance of a specified type or null, with an
  /// optional identifier parameter.
  T? instanceOf<T extends Object?>([String? id]) {
    final instanceKey = ReactterInstance.generateKey<T?>(id);
    return _instancesByKey[instanceKey]?.instance;
  }

  /// Retrieves or creates a [ReactterInstance] and logs messages related
  /// to its creation or registration.
  ReactterInstance<T?>? _getAndCreateIfNotExtist<T extends Object?>([
    String? id,
  ]) {
    final instanceKey = ReactterInstance.generateKey<T?>(id);
    var reactterInstance = _instancesByKey[instanceKey] as ReactterInstance<T>?;

    if (reactterInstance?._builder == null) {
      reactterInstance = ReactterInstance<T>(id);

      Reactter.log(
        'Builder for instance "$reactterInstance" is not registered.\n'
        'You should register instance with '
        '"Reactter.register<$T>(builder:() => $T())" or '
        '"Reactter.create<$T>(builder: () => $T())".',
        isError: true,
      );

      return reactterInstance;
    }

    if (reactterInstance?.instance != null) {
      Reactter.log('Instance "$reactterInstance" already created.');

      return reactterInstance;
    }

    Reactter._recollectStatesAndAttachInstance(
      () => _createInstance(reactterInstance!),
    );

    Reactter.emit(reactterInstance, Lifecycle.initialized);
    Reactter.log('Instance "$reactterInstance" has been created.');

    return reactterInstance;
  }

  /// Creates an instance of a given type using a [ReactterInstance].
  T _createInstance<T>(ReactterInstance reactterInstance) {
    reactterInstance._instance = reactterInstance._builder?.call();

    if (reactterInstance._instance != null) {
      _instancesCreated[reactterInstance._instance!] = reactterInstance;
    }

    return reactterInstance._instance;
  }

  /// Removes an instance of a generic type from a [ReactterInstance].
  void _removeInstance<T>(ReactterInstance reactterInstance) {
    final log = 'Instance "$reactterInstance" has been deleted.';

    _instancesCreated.remove(reactterInstance.instance);

    if (reactterInstance.instance is ReactterState) {
      (reactterInstance.instance as ReactterState).dispose();
    }

    reactterInstance._instance = null;

    Reactter.emit(reactterInstance, Lifecycle.destroyed);

    Reactter.log(log);
  }
}
